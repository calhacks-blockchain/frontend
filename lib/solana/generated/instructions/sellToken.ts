/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SELL_TOKEN_DISCRIMINATOR = new Uint8Array([
  109, 61, 40, 187, 230, 176, 135, 174,
]);

export function getSellTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SELL_TOKEN_DISCRIMINATOR);
}

export type SellTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountLaunchpadState extends string | AccountMeta<string> = string,
  TAccountSolVault extends string | AccountMeta<string> = string,
  TAccountTokenVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountSeller extends string | AccountMeta<string> = string,
  TAccountSellerTokenAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLaunchpadState extends string
        ? WritableAccount<TAccountLaunchpadState>
        : TAccountLaunchpadState,
      TAccountSolVault extends string
        ? WritableAccount<TAccountSolVault>
        : TAccountSolVault,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountSeller extends string
        ? WritableSignerAccount<TAccountSeller> &
            AccountSignerMeta<TAccountSeller>
        : TAccountSeller,
      TAccountSellerTokenAccount extends string
        ? WritableAccount<TAccountSellerTokenAccount>
        : TAccountSellerTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SellTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  tokenAmount: bigint;
};

export type SellTokenInstructionDataArgs = { tokenAmount: number | bigint };

export function getSellTokenInstructionDataEncoder(): FixedSizeEncoder<SellTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SELL_TOKEN_DISCRIMINATOR })
  );
}

export function getSellTokenInstructionDataDecoder(): FixedSizeDecoder<SellTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenAmount', getU64Decoder()],
  ]);
}

export function getSellTokenInstructionDataCodec(): FixedSizeCodec<
  SellTokenInstructionDataArgs,
  SellTokenInstructionData
> {
  return combineCodec(
    getSellTokenInstructionDataEncoder(),
    getSellTokenInstructionDataDecoder()
  );
}

export type SellTokenAsyncInput<
  TAccountLaunchpadState extends string = string,
  TAccountSolVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountMint extends string = string,
  TAccountSeller extends string = string,
  TAccountSellerTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  solVault?: Address<TAccountSolVault>;
  tokenVault: Address<TAccountTokenVault>;
  mint: Address<TAccountMint>;
  seller: TransactionSigner<TAccountSeller>;
  sellerTokenAccount?: Address<TAccountSellerTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenAmount: SellTokenInstructionDataArgs['tokenAmount'];
};

export async function getSellTokenInstructionAsync<
  TAccountLaunchpadState extends string,
  TAccountSolVault extends string,
  TAccountTokenVault extends string,
  TAccountMint extends string,
  TAccountSeller extends string,
  TAccountSellerTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: SellTokenAsyncInput<
    TAccountLaunchpadState,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountSeller,
    TAccountSellerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SellTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountSeller,
    TAccountSellerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    solVault: { value: input.solVault ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: true },
    sellerTokenAccount: {
      value: input.sellerTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.solVault.value) {
    accounts.solVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.launchpadState.value)
        ),
      ],
    });
  }
  if (!accounts.sellerTokenAccount.value) {
    accounts.sellerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.seller.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.solVault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.sellerTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getSellTokenInstructionDataEncoder().encode(
      args as SellTokenInstructionDataArgs
    ),
    programAddress,
  } as SellTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountSeller,
    TAccountSellerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type SellTokenInput<
  TAccountLaunchpadState extends string = string,
  TAccountSolVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountMint extends string = string,
  TAccountSeller extends string = string,
  TAccountSellerTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  solVault: Address<TAccountSolVault>;
  tokenVault: Address<TAccountTokenVault>;
  mint: Address<TAccountMint>;
  seller: TransactionSigner<TAccountSeller>;
  sellerTokenAccount: Address<TAccountSellerTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenAmount: SellTokenInstructionDataArgs['tokenAmount'];
};

export function getSellTokenInstruction<
  TAccountLaunchpadState extends string,
  TAccountSolVault extends string,
  TAccountTokenVault extends string,
  TAccountMint extends string,
  TAccountSeller extends string,
  TAccountSellerTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: SellTokenInput<
    TAccountLaunchpadState,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountSeller,
    TAccountSellerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SellTokenInstruction<
  TProgramAddress,
  TAccountLaunchpadState,
  TAccountSolVault,
  TAccountTokenVault,
  TAccountMint,
  TAccountSeller,
  TAccountSellerTokenAccount,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    solVault: { value: input.solVault ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: true },
    sellerTokenAccount: {
      value: input.sellerTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.solVault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.sellerTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getSellTokenInstructionDataEncoder().encode(
      args as SellTokenInstructionDataArgs
    ),
    programAddress,
  } as SellTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountSeller,
    TAccountSellerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type ParsedSellTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    launchpadState: TAccountMetas[0];
    solVault: TAccountMetas[1];
    tokenVault: TAccountMetas[2];
    mint: TAccountMetas[3];
    seller: TAccountMetas[4];
    sellerTokenAccount: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
  };
  data: SellTokenInstructionData;
};

export function parseSellTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSellTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      launchpadState: getNextAccount(),
      solVault: getNextAccount(),
      tokenVault: getNextAccount(),
      mint: getNextAccount(),
      seller: getNextAccount(),
      sellerTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getSellTokenInstructionDataDecoder().decode(instruction.data),
  };
}
