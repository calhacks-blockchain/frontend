/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GRADUATE_TO_SAFE_DISCRIMINATOR = new Uint8Array([
  74, 51, 2, 69, 126, 0, 183, 24,
]);

export function getGraduateToSafeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GRADUATE_TO_SAFE_DISCRIMINATOR
  );
}

export type GraduateToSafeInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountLaunchpadState extends string | AccountMeta<string> = string,
  TAccountPlatformAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLaunchpadState extends string
        ? WritableAccount<TAccountLaunchpadState>
        : TAccountLaunchpadState,
      TAccountPlatformAuthority extends string
        ? WritableSignerAccount<TAccountPlatformAuthority> &
            AccountSignerMeta<TAccountPlatformAuthority>
        : TAccountPlatformAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type GraduateToSafeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GraduateToSafeInstructionDataArgs = {};

export function getGraduateToSafeInstructionDataEncoder(): FixedSizeEncoder<GraduateToSafeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GRADUATE_TO_SAFE_DISCRIMINATOR })
  );
}

export function getGraduateToSafeInstructionDataDecoder(): FixedSizeDecoder<GraduateToSafeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGraduateToSafeInstructionDataCodec(): FixedSizeCodec<
  GraduateToSafeInstructionDataArgs,
  GraduateToSafeInstructionData
> {
  return combineCodec(
    getGraduateToSafeInstructionDataEncoder(),
    getGraduateToSafeInstructionDataDecoder()
  );
}

export type GraduateToSafeInput<
  TAccountLaunchpadState extends string = string,
  TAccountPlatformAuthority extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  platformAuthority: TransactionSigner<TAccountPlatformAuthority>;
};

export function getGraduateToSafeInstruction<
  TAccountLaunchpadState extends string,
  TAccountPlatformAuthority extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: GraduateToSafeInput<TAccountLaunchpadState, TAccountPlatformAuthority>,
  config?: { programAddress?: TProgramAddress }
): GraduateToSafeInstruction<
  TProgramAddress,
  TAccountLaunchpadState,
  TAccountPlatformAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    platformAuthority: {
      value: input.platformAuthority ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.platformAuthority),
    ],
    data: getGraduateToSafeInstructionDataEncoder().encode({}),
    programAddress,
  } as GraduateToSafeInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountPlatformAuthority
  >);
}

export type ParsedGraduateToSafeInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    launchpadState: TAccountMetas[0];
    platformAuthority: TAccountMetas[1];
  };
  data: GraduateToSafeInstructionData;
};

export function parseGraduateToSafeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedGraduateToSafeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      launchpadState: getNextAccount(),
      platformAuthority: getNextAccount(),
    },
    data: getGraduateToSafeInstructionDataDecoder().decode(instruction.data),
  };
}
