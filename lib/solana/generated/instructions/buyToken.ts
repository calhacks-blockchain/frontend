/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_TOKEN_DISCRIMINATOR = new Uint8Array([
  138, 127, 14, 91, 38, 87, 115, 105,
]);

export function getBuyTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_TOKEN_DISCRIMINATOR);
}

export type BuyTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountLaunchpadState extends string | AccountMeta<string> = string,
  TAccountLaunchpadAuthority extends string | AccountMeta<string> = string,
  TAccountSolVault extends string | AccountMeta<string> = string,
  TAccountTokenVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountBuyerTokenAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLaunchpadState extends string
        ? WritableAccount<TAccountLaunchpadState>
        : TAccountLaunchpadState,
      TAccountLaunchpadAuthority extends string
        ? ReadonlyAccount<TAccountLaunchpadAuthority>
        : TAccountLaunchpadAuthority,
      TAccountSolVault extends string
        ? WritableAccount<TAccountSolVault>
        : TAccountSolVault,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            AccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountBuyerTokenAccount extends string
        ? WritableAccount<TAccountBuyerTokenAccount>
        : TAccountBuyerTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  tokenAmount: bigint;
};

export type BuyTokenInstructionDataArgs = { tokenAmount: number | bigint };

export function getBuyTokenInstructionDataEncoder(): FixedSizeEncoder<BuyTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_TOKEN_DISCRIMINATOR })
  );
}

export function getBuyTokenInstructionDataDecoder(): FixedSizeDecoder<BuyTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenAmount', getU64Decoder()],
  ]);
}

export function getBuyTokenInstructionDataCodec(): FixedSizeCodec<
  BuyTokenInstructionDataArgs,
  BuyTokenInstructionData
> {
  return combineCodec(
    getBuyTokenInstructionDataEncoder(),
    getBuyTokenInstructionDataDecoder()
  );
}

export type BuyTokenAsyncInput<
  TAccountLaunchpadState extends string = string,
  TAccountLaunchpadAuthority extends string = string,
  TAccountSolVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountMint extends string = string,
  TAccountBuyer extends string = string,
  TAccountBuyerTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  launchpadAuthority?: Address<TAccountLaunchpadAuthority>;
  solVault?: Address<TAccountSolVault>;
  tokenVault: Address<TAccountTokenVault>;
  mint: Address<TAccountMint>;
  buyer: TransactionSigner<TAccountBuyer>;
  buyerTokenAccount?: Address<TAccountBuyerTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenAmount: BuyTokenInstructionDataArgs['tokenAmount'];
};

export async function getBuyTokenInstructionAsync<
  TAccountLaunchpadState extends string,
  TAccountLaunchpadAuthority extends string,
  TAccountSolVault extends string,
  TAccountTokenVault extends string,
  TAccountMint extends string,
  TAccountBuyer extends string,
  TAccountBuyerTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: BuyTokenAsyncInput<
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountBuyer,
    TAccountBuyerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountBuyer,
    TAccountBuyerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    launchpadAuthority: {
      value: input.launchpadAuthority ?? null,
      isWritable: false,
    },
    solVault: { value: input.solVault ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    buyerTokenAccount: {
      value: input.buyerTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.launchpadAuthority.value) {
    accounts.launchpadAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 112, 97, 100, 95, 97, 117, 116, 104,
            111, 114, 105, 116, 121,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.launchpadState.value)
        ),
      ],
    });
  }
  if (!accounts.solVault.value) {
    accounts.solVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.launchpadState.value)
        ),
      ],
    });
  }
  if (!accounts.buyerTokenAccount.value) {
    accounts.buyerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.launchpadAuthority),
      getAccountMeta(accounts.solVault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.buyerTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
    programAddress,
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountBuyer,
    TAccountBuyerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type BuyTokenInput<
  TAccountLaunchpadState extends string = string,
  TAccountLaunchpadAuthority extends string = string,
  TAccountSolVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountMint extends string = string,
  TAccountBuyer extends string = string,
  TAccountBuyerTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  launchpadAuthority: Address<TAccountLaunchpadAuthority>;
  solVault: Address<TAccountSolVault>;
  tokenVault: Address<TAccountTokenVault>;
  mint: Address<TAccountMint>;
  buyer: TransactionSigner<TAccountBuyer>;
  buyerTokenAccount: Address<TAccountBuyerTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenAmount: BuyTokenInstructionDataArgs['tokenAmount'];
};

export function getBuyTokenInstruction<
  TAccountLaunchpadState extends string,
  TAccountLaunchpadAuthority extends string,
  TAccountSolVault extends string,
  TAccountTokenVault extends string,
  TAccountMint extends string,
  TAccountBuyer extends string,
  TAccountBuyerTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: BuyTokenInput<
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountBuyer,
    TAccountBuyerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyTokenInstruction<
  TProgramAddress,
  TAccountLaunchpadState,
  TAccountLaunchpadAuthority,
  TAccountSolVault,
  TAccountTokenVault,
  TAccountMint,
  TAccountBuyer,
  TAccountBuyerTokenAccount,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    launchpadAuthority: {
      value: input.launchpadAuthority ?? null,
      isWritable: false,
    },
    solVault: { value: input.solVault ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    buyerTokenAccount: {
      value: input.buyerTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.launchpadAuthority),
      getAccountMeta(accounts.solVault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.buyerTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
    programAddress,
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountSolVault,
    TAccountTokenVault,
    TAccountMint,
    TAccountBuyer,
    TAccountBuyerTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type ParsedBuyTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    launchpadState: TAccountMetas[0];
    launchpadAuthority: TAccountMetas[1];
    solVault: TAccountMetas[2];
    tokenVault: TAccountMetas[3];
    mint: TAccountMetas[4];
    buyer: TAccountMetas[5];
    buyerTokenAccount: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
  };
  data: BuyTokenInstructionData;
};

export function parseBuyTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      launchpadState: getNextAccount(),
      launchpadAuthority: getNextAccount(),
      solVault: getNextAccount(),
      tokenVault: getNextAccount(),
      mint: getNextAccount(),
      buyer: getNextAccount(),
      buyerTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getBuyTokenInstructionDataDecoder().decode(instruction.data),
  };
}
