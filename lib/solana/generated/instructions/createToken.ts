/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_TOKEN_DISCRIMINATOR = new Uint8Array([
  84, 52, 204, 228, 24, 140, 234, 75,
]);

export function getCreateTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TOKEN_DISCRIMINATOR
  );
}

export type CreateTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountLaunchpadState extends string | AccountMeta<string> = string,
  TAccountLaunchpadAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountTokenVault extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLaunchpadState extends string
        ? WritableAccount<TAccountLaunchpadState>
        : TAccountLaunchpadState,
      TAccountLaunchpadAuthority extends string
        ? ReadonlyAccount<TAccountLaunchpadAuthority>
        : TAccountLaunchpadAuthority,
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & AccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountTokenVault extends string
        ? WritableSignerAccount<TAccountTokenVault> &
            AccountSignerMeta<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTokenInstructionData = { discriminator: ReadonlyUint8Array };

export type CreateTokenInstructionDataArgs = {};

export function getCreateTokenInstructionDataEncoder(): FixedSizeEncoder<CreateTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_TOKEN_DISCRIMINATOR })
  );
}

export function getCreateTokenInstructionDataDecoder(): FixedSizeDecoder<CreateTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateTokenInstructionDataCodec(): FixedSizeCodec<
  CreateTokenInstructionDataArgs,
  CreateTokenInstructionData
> {
  return combineCodec(
    getCreateTokenInstructionDataEncoder(),
    getCreateTokenInstructionDataDecoder()
  );
}

export type CreateTokenAsyncInput<
  TAccountLaunchpadState extends string = string,
  TAccountLaunchpadAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  launchpadAuthority?: Address<TAccountLaunchpadAuthority>;
  mint: TransactionSigner<TAccountMint>;
  metadata?: Address<TAccountMetadata>;
  tokenVault: TransactionSigner<TAccountTokenVault>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export async function getCreateTokenInstructionAsync<
  TAccountLaunchpadState extends string,
  TAccountLaunchpadAuthority extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountTokenVault extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateTokenAsyncInput<
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountMint,
    TAccountMetadata,
    TAccountTokenVault,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountMint,
    TAccountMetadata,
    TAccountTokenVault,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    launchpadAuthority: {
      value: input.launchpadAuthority ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.launchpadAuthority.value) {
    accounts.launchpadAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 112, 97, 100, 95, 97, 117, 116, 104,
            111, 114, 105, 116, 121,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.launchpadState.value)
        ),
      ],
    });
  }
  if (!accounts.metadata.value) {
    accounts.metadata.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            11, 112, 101, 177, 227, 209, 124, 69, 56, 157, 82, 127, 107, 4, 195,
            205, 88, 184, 108, 115, 26, 160, 253, 181, 73, 182, 209, 188, 3,
            248, 41, 70,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.launchpadAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getCreateTokenInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountMint,
    TAccountMetadata,
    TAccountTokenVault,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type CreateTokenInput<
  TAccountLaunchpadState extends string = string,
  TAccountLaunchpadAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  launchpadState: Address<TAccountLaunchpadState>;
  launchpadAuthority: Address<TAccountLaunchpadAuthority>;
  mint: TransactionSigner<TAccountMint>;
  metadata: Address<TAccountMetadata>;
  tokenVault: TransactionSigner<TAccountTokenVault>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export function getCreateTokenInstruction<
  TAccountLaunchpadState extends string,
  TAccountLaunchpadAuthority extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountTokenVault extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateTokenInput<
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountMint,
    TAccountMetadata,
    TAccountTokenVault,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTokenInstruction<
  TProgramAddress,
  TAccountLaunchpadState,
  TAccountLaunchpadAuthority,
  TAccountMint,
  TAccountMetadata,
  TAccountTokenVault,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    launchpadState: { value: input.launchpadState ?? null, isWritable: true },
    launchpadAuthority: {
      value: input.launchpadAuthority ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.launchpadState),
      getAccountMeta(accounts.launchpadAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getCreateTokenInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateTokenInstruction<
    TProgramAddress,
    TAccountLaunchpadState,
    TAccountLaunchpadAuthority,
    TAccountMint,
    TAccountMetadata,
    TAccountTokenVault,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type ParsedCreateTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    launchpadState: TAccountMetas[0];
    launchpadAuthority: TAccountMetas[1];
    mint: TAccountMetas[2];
    metadata: TAccountMetas[3];
    tokenVault: TAccountMetas[4];
    authority: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
  };
  data: CreateTokenInstructionData;
};

export function parseCreateTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      launchpadState: getNextAccount(),
      launchpadAuthority: getNextAccount(),
      mint: getNextAccount(),
      metadata: getNextAccount(),
      tokenVault: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateTokenInstructionDataDecoder().decode(instruction.data),
  };
}
