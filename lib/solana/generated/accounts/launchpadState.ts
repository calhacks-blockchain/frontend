/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLaunchpadStatusDecoder,
  getLaunchpadStatusEncoder,
  type LaunchpadStatus,
  type LaunchpadStatusArgs,
} from '../types';

export const LAUNCHPAD_STATE_DISCRIMINATOR = new Uint8Array([
  171, 121, 17, 28, 15, 227, 141, 206,
]);

export function getLaunchpadStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LAUNCHPAD_STATE_DISCRIMINATOR
  );
}

export type LaunchpadState = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  platformAuthority: Address;
  raiseTokenName: string;
  raiseTokenSymbol: string;
  uri: string;
  totalSupply: bigint;
  tokensForSale: bigint;
  solRaiseTarget: bigint;
  virtualSolReserves: bigint;
  virtualTokenReserves: bigint;
  k: bigint;
  solRaised: bigint;
  tokensSold: bigint;
  status: LaunchpadStatus;
  mint: Option<Address>;
  tokenVault: Option<Address>;
};

export type LaunchpadStateArgs = {
  authority: Address;
  platformAuthority: Address;
  raiseTokenName: string;
  raiseTokenSymbol: string;
  uri: string;
  totalSupply: number | bigint;
  tokensForSale: number | bigint;
  solRaiseTarget: number | bigint;
  virtualSolReserves: number | bigint;
  virtualTokenReserves: number | bigint;
  k: number | bigint;
  solRaised: number | bigint;
  tokensSold: number | bigint;
  status: LaunchpadStatusArgs;
  mint: OptionOrNullable<Address>;
  tokenVault: OptionOrNullable<Address>;
};

export function getLaunchpadStateEncoder(): Encoder<LaunchpadStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['platformAuthority', getAddressEncoder()],
      [
        'raiseTokenName',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'raiseTokenSymbol',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['totalSupply', getU64Encoder()],
      ['tokensForSale', getU64Encoder()],
      ['solRaiseTarget', getU64Encoder()],
      ['virtualSolReserves', getU128Encoder()],
      ['virtualTokenReserves', getU128Encoder()],
      ['k', getU128Encoder()],
      ['solRaised', getU64Encoder()],
      ['tokensSold', getU64Encoder()],
      ['status', getLaunchpadStatusEncoder()],
      ['mint', getOptionEncoder(getAddressEncoder())],
      ['tokenVault', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: LAUNCHPAD_STATE_DISCRIMINATOR })
  );
}

export function getLaunchpadStateDecoder(): Decoder<LaunchpadState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['platformAuthority', getAddressDecoder()],
    ['raiseTokenName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'raiseTokenSymbol',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['totalSupply', getU64Decoder()],
    ['tokensForSale', getU64Decoder()],
    ['solRaiseTarget', getU64Decoder()],
    ['virtualSolReserves', getU128Decoder()],
    ['virtualTokenReserves', getU128Decoder()],
    ['k', getU128Decoder()],
    ['solRaised', getU64Decoder()],
    ['tokensSold', getU64Decoder()],
    ['status', getLaunchpadStatusDecoder()],
    ['mint', getOptionDecoder(getAddressDecoder())],
    ['tokenVault', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getLaunchpadStateCodec(): Codec<
  LaunchpadStateArgs,
  LaunchpadState
> {
  return combineCodec(getLaunchpadStateEncoder(), getLaunchpadStateDecoder());
}

export function decodeLaunchpadState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LaunchpadState, TAddress>;
export function decodeLaunchpadState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LaunchpadState, TAddress>;
export function decodeLaunchpadState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<LaunchpadState, TAddress> | MaybeAccount<LaunchpadState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLaunchpadStateDecoder()
  );
}

export async function fetchLaunchpadState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LaunchpadState, TAddress>> {
  const maybeAccount = await fetchMaybeLaunchpadState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLaunchpadState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LaunchpadState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLaunchpadState(maybeAccount);
}

export async function fetchAllLaunchpadState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LaunchpadState>[]> {
  const maybeAccounts = await fetchAllMaybeLaunchpadState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLaunchpadState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LaunchpadState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLaunchpadState(maybeAccount)
  );
}
