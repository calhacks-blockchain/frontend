/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBuyTokenInstruction,
  type ParsedCreateTokenInstruction,
  type ParsedGraduateToSafeInstruction,
  type ParsedInitializeInstruction,
  type ParsedSellTokenInstruction,
} from '../instructions';

export const LAUNCHPAD_PROGRAM_ADDRESS =
  'DKBbcmAX3nRdSot1pwcXjEJ6cjWi5tEcSuciaeToprzv' as Address<'DKBbcmAX3nRdSot1pwcXjEJ6cjWi5tEcSuciaeToprzv'>;

export enum LaunchpadAccount {
  LaunchpadState,
}

export function identifyLaunchpadAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpadAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 121, 17, 28, 15, 227, 141, 206])
      ),
      0
    )
  ) {
    return LaunchpadAccount.LaunchpadState;
  }
  throw new Error(
    'The provided account could not be identified as a launchpad account.'
  );
}

export enum LaunchpadInstruction {
  BuyToken,
  CreateToken,
  GraduateToSafe,
  Initialize,
  SellToken,
}

export function identifyLaunchpadInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpadInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 127, 14, 91, 38, 87, 115, 105])
      ),
      0
    )
  ) {
    return LaunchpadInstruction.BuyToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 52, 204, 228, 24, 140, 234, 75])
      ),
      0
    )
  ) {
    return LaunchpadInstruction.CreateToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 51, 2, 69, 126, 0, 183, 24])
      ),
      0
    )
  ) {
    return LaunchpadInstruction.GraduateToSafe;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return LaunchpadInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 61, 40, 187, 230, 176, 135, 174])
      ),
      0
    )
  ) {
    return LaunchpadInstruction.SellToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a launchpad instruction.'
  );
}

export type ParsedLaunchpadInstruction<
  TProgram extends string = 'DKBbcmAX3nRdSot1pwcXjEJ6cjWi5tEcSuciaeToprzv',
> =
  | ({
      instructionType: LaunchpadInstruction.BuyToken;
    } & ParsedBuyTokenInstruction<TProgram>)
  | ({
      instructionType: LaunchpadInstruction.CreateToken;
    } & ParsedCreateTokenInstruction<TProgram>)
  | ({
      instructionType: LaunchpadInstruction.GraduateToSafe;
    } & ParsedGraduateToSafeInstruction<TProgram>)
  | ({
      instructionType: LaunchpadInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: LaunchpadInstruction.SellToken;
    } & ParsedSellTokenInstruction<TProgram>);
